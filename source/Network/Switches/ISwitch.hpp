#pragma once

#include "Network/Port.hpp"
#include <vector>

namespace Network::Switches {
    /**
     * @brief Initially, set the whether the switches will have computing capabilities
     * @param enable True to enable in-network computing capabilities
     */
    void setNetworkComputing(const bool enable);

    /**
     * @brief  Check if the switches have computing capabilities
     * @return True If the switches can compute
     */
    [[nodiscard]] bool isNetworkComputingEnabled();

    class ISwitch {
    protected: /** Construction **/
        /**
         * @brief Construct a base switch object
         * @param ID         Unique ID of the switch among same type of switches
         * @param portAmount Number of ports the switch will have
         *
         * @attention IDs must be generated by derived class itself and should be unique among its objects.
         * @note      Two different derived class can generate objects with the same ID
         */
        explicit ISwitch(const std::size_t ID, const std::size_t portAmount);

    public:
        ISwitch() = delete;

        // Forbid copying
        ISwitch(const ISwitch &) = delete;
        ISwitch &operator=(const ISwitch &) = delete;

        // Must be move-able to store in containers
        ISwitch(ISwitch &&) = default;
        ISwitch &operator=(ISwitch &&) = delete;

    public: /** Methods **/
        [[nodiscard]] virtual bool tick() = 0;

        /**
         * @brief  Get the unique ID of the switch.
         * @return Unique ID among same type of switches
         */
        [[nodiscard]] std::size_t getID() const { return m_ID; }

        /**
         * @brief  Get reference to a specific port of this switch
         * @param  portID ID of the port to get (Starting from 0)
         * @return Reference to requested port object
         */
        [[nodiscard]] Port &getPort(const std::size_t &portID);

        /**
         * @brief  Check if all ports of the switch has been initialized properly
         * @return True If all ports have been connected to another port
         */
        [[nodiscard]] bool isReady() const;

        /**
         * @brief  Check if the switch has computing capabilities
         * @return True If the switch can compute
         */
        [[nodiscard]] bool canCompute() const;

    protected: /** Members **/
        const size_t m_ID;
        const std::size_t m_portAmount;
        std::vector<Port> m_ports;
    };
}
